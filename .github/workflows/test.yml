name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'

defaults:
  run:
    working-directory: backend

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run unit tests
      run: SKIP_DB_TESTS=true go test -v -race ./internal/... ./server/...

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Setup test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE oriondns_test;"
      env:
        PGPASSWORD: postgres
    
    - name: Run migrations
      run: |
        go install github.com/jackc/tern/v2@latest
        tern migrate --migrations ./migrations --config ./migrations/tern-dev.conf
      env:
        TERN_DB_URL: postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable

    - name: Run integration tests
      run: |
        TEST_DATABASE_URL="postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable" \
        go test -v -race ./...
      env:
        TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable

  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Setup test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE oriondns_test;"
      env:
        PGPASSWORD: postgres
    
    - name: Run migrations
      run: |
        go install github.com/jackc/tern/v2@latest
        tern migrate --migrations ./migrations --config ./migrations/tern-dev.conf
      env:
        TERN_DB_URL: postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable

    - name: Run tests with coverage
      run: |
        TEST_DATABASE_URL="postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable" \
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/oriondns_test?sslmode=disable
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: backend
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './backend/...'
        format: sarif
        output: results.sarif
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif